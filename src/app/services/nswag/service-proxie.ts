//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import { mergeMap as _observableMergeMap, catchError as _observableCatch } from 'rxjs/operators';
import { Observable, throwError as _observableThrow, of as _observableOf } from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import { HttpClient, HttpHeaders, HttpResponse, HttpResponseBase } from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class HrmsServices {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    getAllJobPosts(): Observable<ApiResponseMessageHrmsOfIListOfGetAllJobPostsDto> {
        let url_ = this.baseUrl + "/api/Hrms/GetAllJobPosts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllJobPosts(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllJobPosts(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageHrmsOfIListOfGetAllJobPostsDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageHrmsOfIListOfGetAllJobPostsDto>;
        }));
    }

    protected processGetAllJobPosts(response: HttpResponseBase): Observable<ApiResponseMessageHrmsOfIListOfGetAllJobPostsDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageHrmsOfIListOfGetAllJobPostsDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    whoAmI(): Observable<FileResponse> {
        let url_ = this.baseUrl + "/api/Hrms/whoami";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/octet-stream"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processWhoAmI(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processWhoAmI(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<FileResponse>;
                }
            } else
                return _observableThrow(response_) as any as Observable<FileResponse>;
        }));
    }

    protected processWhoAmI(response: HttpResponseBase): Observable<FileResponse> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:[^\s]+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return _observableOf({ fileName: fileName, data: responseBlob as any, status: status, headers: _headers });
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllGender(): Observable<ApiResponseMessageHrmsOfIListOfGetAllGenderDto> {
        let url_ = this.baseUrl + "/api/Hrms/GetAllGender";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllGender(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllGender(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageHrmsOfIListOfGetAllGenderDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageHrmsOfIListOfGetAllGenderDto>;
        }));
    }

    protected processGetAllGender(response: HttpResponseBase): Observable<ApiResponseMessageHrmsOfIListOfGetAllGenderDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageHrmsOfIListOfGetAllGenderDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getAllCivilStatus(): Observable<ApiResponseMessageHrmsOfIListOfGetAllCivilStatusDto> {
        let url_ = this.baseUrl + "/api/Hrms/GetAllCivilStatus";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetAllCivilStatus(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetAllCivilStatus(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageHrmsOfIListOfGetAllCivilStatusDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageHrmsOfIListOfGetAllCivilStatusDto>;
        }));
    }

    protected processGetAllCivilStatus(response: HttpResponseBase): Observable<ApiResponseMessageHrmsOfIListOfGetAllCivilStatusDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageHrmsOfIListOfGetAllCivilStatusDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

@Injectable()
export class UserServices {
    private http: HttpClient;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(HttpClient) http: HttpClient, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ?? "";
    }

    registerUser(user: UserDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/User/RegisterUser";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterUser(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterUser(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processRegisterUser(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    registerAdmin(user: RegisterUserDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/User/RegisterAdmin";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRegisterAdmin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRegisterAdmin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processRegisterAdmin(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    login(user: RegisterUserDto): Observable<ApiResponseMessageOfUserLoginDto> {
        let url_ = this.baseUrl + "/api/User/Login";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(user);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogin(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogin(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfUserLoginDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfUserLoginDto>;
        }));
    }

    protected processLogin(response: HttpResponseBase): Observable<ApiResponseMessageOfUserLoginDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfUserLoginDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    refreshToken(): Observable<ApiResponseMessageOfUserLoginDto> {
        let url_ = this.baseUrl + "/api/User/refresh-token";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processRefreshToken(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processRefreshToken(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfUserLoginDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfUserLoginDto>;
        }));
    }

    protected processRefreshToken(response: HttpResponseBase): Observable<ApiResponseMessageOfUserLoginDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfUserLoginDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    logout(): Observable<ApiResponseMessageOfBoolean> {
        let url_ = this.baseUrl + "/api/User/logout";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processLogout(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processLogout(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfBoolean>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfBoolean>;
        }));
    }

    protected processLogout(response: HttpResponseBase): Observable<ApiResponseMessageOfBoolean> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfBoolean.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getUserProfileDetails(): Observable<ApiResponseMessageOfUserDto> {
        let url_ = this.baseUrl + "/api/User/getUserProfileDetails";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserProfileDetails(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserProfileDetails(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfUserDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfUserDto>;
        }));
    }

    protected processGetUserProfileDetails(response: HttpResponseBase): Observable<ApiResponseMessageOfUserDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfUserDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    insertOrUpdateUserProfile(input: InsertOrUpdateUserProfileDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/User/InsertOrUpdateUserProfile";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processInsertOrUpdateUserProfile(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processInsertOrUpdateUserProfile(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processInsertOrUpdateUserProfile(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    search(q: string | undefined): Observable<NominatimResult[]> {
        let url_ = this.baseUrl + "/api/User/search?";
        if (q === null)
            throw new globalThis.Error("The parameter 'q' cannot be null.");
        else if (q !== undefined)
            url_ += "q=" + encodeURIComponent("" + q) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processSearch(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processSearch(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<NominatimResult[]>;
                }
            } else
                return _observableThrow(response_) as any as Observable<NominatimResult[]>;
        }));
    }

    protected processSearch(response: HttpResponseBase): Observable<NominatimResult[]> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(NominatimResult.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createOrEditEducation(input: CreateOrEditEducationDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/User/CreateOrEditEducation";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEditEducation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEditEducation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processCreateOrEditEducation(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getUserEducation(): Observable<ApiResponseMessageOfIListOfCreateOrEditEducationDto> {
        let url_ = this.baseUrl + "/api/User/GetUserEducation";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserEducation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserEducation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfIListOfCreateOrEditEducationDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfIListOfCreateOrEditEducationDto>;
        }));
    }

    protected processGetUserEducation(response: HttpResponseBase): Observable<ApiResponseMessageOfIListOfCreateOrEditEducationDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfIListOfCreateOrEditEducationDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteUserEducation(educationId: string | undefined): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/User/DeleteUserEducation?";
        if (educationId === null)
            throw new globalThis.Error("The parameter 'educationId' cannot be null.");
        else if (educationId !== undefined)
            url_ += "educationId=" + encodeURIComponent("" + educationId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUserEducation(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUserEducation(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processDeleteUserEducation(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    createOrEditWorkExperience(input: CreateOrEditWorkExperienceDto): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/User/CreateOrEditWorkExperience";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(input);

        let options_ : any = {
            body: content_,
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Content-Type": "application/json",
                "Accept": "application/json"
            })
        };

        return this.http.request("post", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processCreateOrEditWorkExperience(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processCreateOrEditWorkExperience(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processCreateOrEditWorkExperience(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    getUserWorkExperience(): Observable<ApiResponseMessageOfIListOfCreateOrEditWorkExperienceDto> {
        let url_ = this.baseUrl + "/api/User/GetUserWorkExperience";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("get", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processGetUserWorkExperience(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processGetUserWorkExperience(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfIListOfCreateOrEditWorkExperienceDto>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfIListOfCreateOrEditWorkExperienceDto>;
        }));
    }

    protected processGetUserWorkExperience(response: HttpResponseBase): Observable<ApiResponseMessageOfIListOfCreateOrEditWorkExperienceDto> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfIListOfCreateOrEditWorkExperienceDto.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }

    deleteUserWorkExperience(workexperienceId: string | undefined): Observable<ApiResponseMessageOfString> {
        let url_ = this.baseUrl + "/api/User/DeleteUserWorkExperience?";
        if (workexperienceId === null)
            throw new globalThis.Error("The parameter 'workexperienceId' cannot be null.");
        else if (workexperienceId !== undefined)
            url_ += "workexperienceId=" + encodeURIComponent("" + workexperienceId) + "&";
        url_ = url_.replace(/[?&]$/, "");

        let options_ : any = {
            observe: "response",
            responseType: "blob",
            headers: new HttpHeaders({
                "Accept": "application/json"
            })
        };

        return this.http.request("delete", url_, options_).pipe(_observableMergeMap((response_ : any) => {
            return this.processDeleteUserWorkExperience(response_);
        })).pipe(_observableCatch((response_: any) => {
            if (response_ instanceof HttpResponseBase) {
                try {
                    return this.processDeleteUserWorkExperience(response_ as any);
                } catch (e) {
                    return _observableThrow(e) as any as Observable<ApiResponseMessageOfString>;
                }
            } else
                return _observableThrow(response_) as any as Observable<ApiResponseMessageOfString>;
        }));
    }

    protected processDeleteUserWorkExperience(response: HttpResponseBase): Observable<ApiResponseMessageOfString> {
        const status = response.status;
        const responseBlob =
            response instanceof HttpResponse ? response.body :
            (response as any).error instanceof Blob ? (response as any).error : undefined;

        let _headers: any = {}; if (response.headers) { for (let key of response.headers.keys()) { _headers[key] = response.headers.get(key); }}
        if (status === 200) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = ApiResponseMessageOfString.fromJS(resultData200);
            return _observableOf(result200);
            }));
        } else if (status !== 200 && status !== 204) {
            return blobToText(responseBlob).pipe(_observableMergeMap((_responseText: string) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            }));
        }
        return _observableOf(null as any);
    }
}

export class ApiResponseMessageHrmsOfIListOfGetAllJobPostsDto implements IApiResponseMessageHrmsOfIListOfGetAllJobPostsDto {
    data!: GetAllJobPostsDto[];
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageHrmsOfIListOfGetAllJobPostsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetAllJobPostsDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageHrmsOfIListOfGetAllJobPostsDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageHrmsOfIListOfGetAllJobPostsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : undefined as any);
        }
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageHrmsOfIListOfGetAllJobPostsDto {
    data: GetAllJobPostsDto[];
    isSuccess: boolean;
    errorMessage: string;
}

export class GetAllJobPostsDto implements IGetAllJobPostsDto {
    jobPostingId!: string;
    jobTitleId!: string | undefined;
    jobAdsPic!: string;
    location!: string;
    minRate!: number;
    maxRate!: number;
    jobTitleName!: string | undefined;
    jobDescription!: string;
    essentialDuties!: string;
    education!: string;
    specialized!: string;
    skills!: string;
    experience!: string;
    professionalCert!: string;
    specialSkills!: string;
    training!: string;
    workingConditions!: string;
    bussinessUnit!: string;
    creationTime!: Date;
    introStatement!: string;
    logoInitial!: string | undefined;

    constructor(data?: IGetAllJobPostsDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.jobPostingId = _data["jobPostingId"];
            this.jobTitleId = _data["jobTitleId"];
            this.jobAdsPic = _data["jobAdsPic"];
            this.location = _data["location"];
            this.minRate = _data["minRate"];
            this.maxRate = _data["maxRate"];
            this.jobTitleName = _data["jobTitleName"];
            this.jobDescription = _data["jobDescription"];
            this.essentialDuties = _data["essentialDuties"];
            this.education = _data["education"];
            this.specialized = _data["specialized"];
            this.skills = _data["skills"];
            this.experience = _data["experience"];
            this.professionalCert = _data["professionalCert"];
            this.specialSkills = _data["specialSkills"];
            this.training = _data["training"];
            this.workingConditions = _data["workingConditions"];
            this.bussinessUnit = _data["bussinessUnit"];
            this.creationTime = _data["creationTime"] ? new Date(_data["creationTime"].toString()) : undefined as any;
            this.introStatement = _data["introStatement"];
            this.logoInitial = _data["logoInitial"];
        }
    }

    static fromJS(data: any): GetAllJobPostsDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllJobPostsDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jobPostingId"] = this.jobPostingId;
        data["jobTitleId"] = this.jobTitleId;
        data["jobAdsPic"] = this.jobAdsPic;
        data["location"] = this.location;
        data["minRate"] = this.minRate;
        data["maxRate"] = this.maxRate;
        data["jobTitleName"] = this.jobTitleName;
        data["jobDescription"] = this.jobDescription;
        data["essentialDuties"] = this.essentialDuties;
        data["education"] = this.education;
        data["specialized"] = this.specialized;
        data["skills"] = this.skills;
        data["experience"] = this.experience;
        data["professionalCert"] = this.professionalCert;
        data["specialSkills"] = this.specialSkills;
        data["training"] = this.training;
        data["workingConditions"] = this.workingConditions;
        data["bussinessUnit"] = this.bussinessUnit;
        data["creationTime"] = this.creationTime ? this.creationTime.toISOString() : undefined as any;
        data["introStatement"] = this.introStatement;
        data["logoInitial"] = this.logoInitial;
        return data;
    }
}

export interface IGetAllJobPostsDto {
    jobPostingId: string;
    jobTitleId: string | undefined;
    jobAdsPic: string;
    location: string;
    minRate: number;
    maxRate: number;
    jobTitleName: string | undefined;
    jobDescription: string;
    essentialDuties: string;
    education: string;
    specialized: string;
    skills: string;
    experience: string;
    professionalCert: string;
    specialSkills: string;
    training: string;
    workingConditions: string;
    bussinessUnit: string;
    creationTime: Date;
    introStatement: string;
    logoInitial: string | undefined;
}

export class ApiResponseMessageHrmsOfIListOfGetAllGenderDto implements IApiResponseMessageHrmsOfIListOfGetAllGenderDto {
    data!: GetAllGenderDto[];
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageHrmsOfIListOfGetAllGenderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetAllGenderDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageHrmsOfIListOfGetAllGenderDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageHrmsOfIListOfGetAllGenderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : undefined as any);
        }
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageHrmsOfIListOfGetAllGenderDto {
    data: GetAllGenderDto[];
    isSuccess: boolean;
    errorMessage: string;
}

export class GetAllGenderDto implements IGetAllGenderDto {
    id!: string;
    name!: string;

    constructor(data?: IGetAllGenderDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GetAllGenderDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllGenderDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IGetAllGenderDto {
    id: string;
    name: string;
}

export class ApiResponseMessageHrmsOfIListOfGetAllCivilStatusDto implements IApiResponseMessageHrmsOfIListOfGetAllCivilStatusDto {
    data!: GetAllCivilStatusDto[];
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageHrmsOfIListOfGetAllCivilStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(GetAllCivilStatusDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageHrmsOfIListOfGetAllCivilStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageHrmsOfIListOfGetAllCivilStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : undefined as any);
        }
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageHrmsOfIListOfGetAllCivilStatusDto {
    data: GetAllCivilStatusDto[];
    isSuccess: boolean;
    errorMessage: string;
}

export class GetAllCivilStatusDto implements IGetAllCivilStatusDto {
    id!: string;
    name!: string;

    constructor(data?: IGetAllCivilStatusDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
        }
    }

    static fromJS(data: any): GetAllCivilStatusDto {
        data = typeof data === 'object' ? data : {};
        let result = new GetAllCivilStatusDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        return data;
    }
}

export interface IGetAllCivilStatusDto {
    id: string;
    name: string;
}

export class ApiResponseMessageOfString implements IApiResponseMessageOfString {
    data!: string;
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfString {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfString {
    data: string;
    isSuccess: boolean;
    errorMessage: string;
}

export class UserDto implements IUserDto {
    id!: string;
    firstName!: string | undefined;
    lastName!: string | undefined;
    middleName!: string | undefined;
    contactNo!: string | undefined;
    userName!: string | undefined;
    password!: string | undefined;
    email!: string | undefined;
    dateOfBirth!: Date | undefined;
    hr201GenderId!: string | undefined;
    hr201CivilStatusId!: string | undefined;
    gender!: string | undefined;
    civilStatus!: string | undefined;
    address!: string | undefined;
    aboutMe!: string | undefined;
    streetDetails!: string | undefined;
    userProfileByte!: string | undefined;

    constructor(data?: IUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.middleName = _data["middleName"];
            this.contactNo = _data["contactNo"];
            this.userName = _data["userName"];
            this.password = _data["password"];
            this.email = _data["email"];
            this.dateOfBirth = _data["dateOfBirth"] ? new Date(_data["dateOfBirth"].toString()) : undefined as any;
            this.hr201GenderId = _data["hr201GenderId"];
            this.hr201CivilStatusId = _data["hr201CivilStatusId"];
            this.gender = _data["gender"];
            this.civilStatus = _data["civilStatus"];
            this.address = _data["address"];
            this.aboutMe = _data["aboutMe"];
            this.streetDetails = _data["streetDetails"];
            this.userProfileByte = _data["userProfileByte"];
        }
    }

    static fromJS(data: any): UserDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["middleName"] = this.middleName;
        data["contactNo"] = this.contactNo;
        data["userName"] = this.userName;
        data["password"] = this.password;
        data["email"] = this.email;
        data["dateOfBirth"] = this.dateOfBirth ? this.dateOfBirth.toISOString() : undefined as any;
        data["hr201GenderId"] = this.hr201GenderId;
        data["hr201CivilStatusId"] = this.hr201CivilStatusId;
        data["gender"] = this.gender;
        data["civilStatus"] = this.civilStatus;
        data["address"] = this.address;
        data["aboutMe"] = this.aboutMe;
        data["streetDetails"] = this.streetDetails;
        data["userProfileByte"] = this.userProfileByte;
        return data;
    }
}

export interface IUserDto {
    id: string;
    firstName: string | undefined;
    lastName: string | undefined;
    middleName: string | undefined;
    contactNo: string | undefined;
    userName: string | undefined;
    password: string | undefined;
    email: string | undefined;
    dateOfBirth: Date | undefined;
    hr201GenderId: string | undefined;
    hr201CivilStatusId: string | undefined;
    gender: string | undefined;
    civilStatus: string | undefined;
    address: string | undefined;
    aboutMe: string | undefined;
    streetDetails: string | undefined;
    userProfileByte: string | undefined;
}

export class RegisterUserDto implements IRegisterUserDto {
    userName!: string;
    password!: string;

    constructor(data?: IRegisterUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userName = _data["userName"];
            this.password = _data["password"];
        }
    }

    static fromJS(data: any): RegisterUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new RegisterUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userName"] = this.userName;
        data["password"] = this.password;
        return data;
    }
}

export interface IRegisterUserDto {
    userName: string;
    password: string;
}

export class ApiResponseMessageOfUserLoginDto implements IApiResponseMessageOfUserLoginDto {
    data!: UserLoginDto;
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfUserLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.data = new UserLoginDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UserLoginDto.fromJS(_data["data"]) : new UserLoginDto();
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfUserLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfUserLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : undefined as any;
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfUserLoginDto {
    data: UserLoginDto;
    isSuccess: boolean;
    errorMessage: string;
}

export class UserLoginDto implements IUserLoginDto {
    userID!: string;
    userName!: string;
    userToken!: string;
    newRefreshToken!: string;
    userRole!: string[];

    constructor(data?: IUserLoginDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.userID = _data["userID"];
            this.userName = _data["userName"];
            this.userToken = _data["userToken"];
            this.newRefreshToken = _data["newRefreshToken"];
            if (Array.isArray(_data["userRole"])) {
                this.userRole = [] as any;
                for (let item of _data["userRole"])
                    this.userRole!.push(item);
            }
        }
    }

    static fromJS(data: any): UserLoginDto {
        data = typeof data === 'object' ? data : {};
        let result = new UserLoginDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["userID"] = this.userID;
        data["userName"] = this.userName;
        data["userToken"] = this.userToken;
        data["newRefreshToken"] = this.newRefreshToken;
        if (Array.isArray(this.userRole)) {
            data["userRole"] = [];
            for (let item of this.userRole)
                data["userRole"].push(item);
        }
        return data;
    }
}

export interface IUserLoginDto {
    userID: string;
    userName: string;
    userToken: string;
    newRefreshToken: string;
    userRole: string[];
}

export class ApiResponseMessageOfBoolean implements IApiResponseMessageOfBoolean {
    data!: boolean;
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfBoolean) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"];
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfBoolean {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfBoolean();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data;
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfBoolean {
    data: boolean;
    isSuccess: boolean;
    errorMessage: string;
}

export class ApiResponseMessageOfUserDto implements IApiResponseMessageOfUserDto {
    data!: UserDto;
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfUserDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.data = new UserDto();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.data = _data["data"] ? UserDto.fromJS(_data["data"]) : new UserDto();
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfUserDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfUserDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["data"] = this.data ? this.data.toJSON() : undefined as any;
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfUserDto {
    data: UserDto;
    isSuccess: boolean;
    errorMessage: string;
}

export class InsertOrUpdateUserProfileDto implements IInsertOrUpdateUserProfileDto {
    profileImageBase64!: string;
    profileImageFileName!: string;
    profileImageContentType!: string;
    removeProfileImage!: boolean;

    constructor(data?: IInsertOrUpdateUserProfileDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.profileImageBase64 = _data["profileImageBase64"];
            this.profileImageFileName = _data["profileImageFileName"];
            this.profileImageContentType = _data["profileImageContentType"];
            this.removeProfileImage = _data["removeProfileImage"];
        }
    }

    static fromJS(data: any): InsertOrUpdateUserProfileDto {
        data = typeof data === 'object' ? data : {};
        let result = new InsertOrUpdateUserProfileDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["profileImageBase64"] = this.profileImageBase64;
        data["profileImageFileName"] = this.profileImageFileName;
        data["profileImageContentType"] = this.profileImageContentType;
        data["removeProfileImage"] = this.removeProfileImage;
        return data;
    }
}

export interface IInsertOrUpdateUserProfileDto {
    profileImageBase64: string;
    profileImageFileName: string;
    profileImageContentType: string;
    removeProfileImage: boolean;
}

export class NominatimResult implements INominatimResult {
    place_id!: number;
    display_name!: string;
    lat!: string;
    lon!: string;
    address!: { [key: string]: string; } | undefined;

    constructor(data?: INominatimResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.place_id = _data["place_id"];
            this.display_name = _data["display_name"];
            this.lat = _data["lat"];
            this.lon = _data["lon"];
            if (_data["address"]) {
                this.address = {} as any;
                for (let key in _data["address"]) {
                    if (_data["address"].hasOwnProperty(key))
                        (this.address as any)![key] = _data["address"][key];
                }
            }
        }
    }

    static fromJS(data: any): NominatimResult {
        data = typeof data === 'object' ? data : {};
        let result = new NominatimResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["place_id"] = this.place_id;
        data["display_name"] = this.display_name;
        data["lat"] = this.lat;
        data["lon"] = this.lon;
        if (this.address) {
            data["address"] = {};
            for (let key in this.address) {
                if (this.address.hasOwnProperty(key))
                    (data["address"] as any)[key] = (this.address as any)[key];
            }
        }
        return data;
    }
}

export interface INominatimResult {
    place_id: number;
    display_name: string;
    lat: string;
    lon: string;
    address: { [key: string]: string; } | undefined;
}

export class CreateOrEditEducationDto implements ICreateOrEditEducationDto {
    id!: string;
    schoolName!: string;
    educationLevel!: string;
    course!: string;
    startDate!: Date;
    endDate!: Date;

    constructor(data?: ICreateOrEditEducationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.schoolName = _data["schoolName"];
            this.educationLevel = _data["educationLevel"];
            this.course = _data["course"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined as any;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): CreateOrEditEducationDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditEducationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["schoolName"] = this.schoolName;
        data["educationLevel"] = this.educationLevel;
        data["course"] = this.course;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined as any;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined as any;
        return data;
    }
}

export interface ICreateOrEditEducationDto {
    id: string;
    schoolName: string;
    educationLevel: string;
    course: string;
    startDate: Date;
    endDate: Date;
}

export class ApiResponseMessageOfIListOfCreateOrEditEducationDto implements IApiResponseMessageOfIListOfCreateOrEditEducationDto {
    data!: CreateOrEditEducationDto[];
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfIListOfCreateOrEditEducationDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CreateOrEditEducationDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfIListOfCreateOrEditEducationDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfIListOfCreateOrEditEducationDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : undefined as any);
        }
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfIListOfCreateOrEditEducationDto {
    data: CreateOrEditEducationDto[];
    isSuccess: boolean;
    errorMessage: string;
}

export class CreateOrEditWorkExperienceDto implements ICreateOrEditWorkExperienceDto {
    id!: string;
    companyName!: string;
    companyAddress!: string;
    jobTitle!: string;
    jobDescription!: string;
    startDate!: Date;
    endDate!: Date | undefined;

    constructor(data?: ICreateOrEditWorkExperienceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.companyName = _data["companyName"];
            this.companyAddress = _data["companyAddress"];
            this.jobTitle = _data["jobTitle"];
            this.jobDescription = _data["jobDescription"];
            this.startDate = _data["startDate"] ? new Date(_data["startDate"].toString()) : undefined as any;
            this.endDate = _data["endDate"] ? new Date(_data["endDate"].toString()) : undefined as any;
        }
    }

    static fromJS(data: any): CreateOrEditWorkExperienceDto {
        data = typeof data === 'object' ? data : {};
        let result = new CreateOrEditWorkExperienceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["companyName"] = this.companyName;
        data["companyAddress"] = this.companyAddress;
        data["jobTitle"] = this.jobTitle;
        data["jobDescription"] = this.jobDescription;
        data["startDate"] = this.startDate ? this.startDate.toISOString() : undefined as any;
        data["endDate"] = this.endDate ? this.endDate.toISOString() : undefined as any;
        return data;
    }
}

export interface ICreateOrEditWorkExperienceDto {
    id: string;
    companyName: string;
    companyAddress: string;
    jobTitle: string;
    jobDescription: string;
    startDate: Date;
    endDate: Date | undefined;
}

export class ApiResponseMessageOfIListOfCreateOrEditWorkExperienceDto implements IApiResponseMessageOfIListOfCreateOrEditWorkExperienceDto {
    data!: CreateOrEditWorkExperienceDto[];
    isSuccess!: boolean;
    errorMessage!: string;

    constructor(data?: IApiResponseMessageOfIListOfCreateOrEditWorkExperienceDto) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
        if (!data) {
            this.data = [];
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["data"])) {
                this.data = [] as any;
                for (let item of _data["data"])
                    this.data!.push(CreateOrEditWorkExperienceDto.fromJS(item));
            }
            this.isSuccess = _data["isSuccess"];
            this.errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ApiResponseMessageOfIListOfCreateOrEditWorkExperienceDto {
        data = typeof data === 'object' ? data : {};
        let result = new ApiResponseMessageOfIListOfCreateOrEditWorkExperienceDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.data)) {
            data["data"] = [];
            for (let item of this.data)
                data["data"].push(item ? item.toJSON() : undefined as any);
        }
        data["isSuccess"] = this.isSuccess;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IApiResponseMessageOfIListOfCreateOrEditWorkExperienceDto {
    data: CreateOrEditWorkExperienceDto[];
    isSuccess: boolean;
    errorMessage: string;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): Observable<any> {
    return _observableThrow(new ApiException(message, status, response, headers, result));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => {
        if (!blob) {
            observer.next("");
            observer.complete();
        } else {
            let reader = new FileReader();
            reader.onload = event => {
                observer.next((event.target as any).result);
                observer.complete();
            };
            reader.readAsText(blob);
        }
    });
}