//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.5.0.0 (NJsonSchema v11.4.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* eslint-disable */
// ReSharper disable InconsistentNaming

import {
  mergeMap as _observableMergeMap,
  catchError as _observableCatch,
} from 'rxjs/operators';
import {
  Observable,
  throwError as _observableThrow,
  of as _observableOf,
} from 'rxjs';
import { Injectable, Inject, Optional, InjectionToken } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpResponse,
  HttpResponseBase,
} from '@angular/common/http';

export const API_BASE_URL = new InjectionToken<string>('API_BASE_URL');

@Injectable()
export class HrmsServices {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  getAllJobPosts(): Observable<ApiResponseMessageOfIListOfGetAllJobPostsDto> {
    let url_ = this.baseUrl + '/api/Hrms/GetAllJobPosts';
    url_ = url_.replace(/[?&]$/, '');

    let options_: any = {
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('get', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processGetAllJobPosts(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processGetAllJobPosts(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<ApiResponseMessageOfIListOfGetAllJobPostsDto>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<ApiResponseMessageOfIListOfGetAllJobPostsDto>;
        })
      );
  }

  protected processGetAllJobPosts(
    response: HttpResponseBase
  ): Observable<ApiResponseMessageOfIListOfGetAllJobPostsDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 =
            ApiResponseMessageOfIListOfGetAllJobPostsDto.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

@Injectable()
export class UserServices {
  private http: HttpClient;
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined =
    undefined;

  constructor(
    @Inject(HttpClient) http: HttpClient,
    @Optional() @Inject(API_BASE_URL) baseUrl?: string
  ) {
    this.http = http;
    this.baseUrl = baseUrl ?? '';
  }

  registerUser(user: UserDto): Observable<ApiResponseMessageOfString> {
    let url_ = this.baseUrl + '/api/User/RegisterUser';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(user);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRegisterUser(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRegisterUser(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<ApiResponseMessageOfString>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<ApiResponseMessageOfString>;
        })
      );
  }

  protected processRegisterUser(
    response: HttpResponseBase
  ): Observable<ApiResponseMessageOfString> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = ApiResponseMessageOfString.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  registerAdmin(user: RegisterUserDto): Observable<ApiResponseMessageOfString> {
    let url_ = this.baseUrl + '/api/User/RegisterAdmin';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(user);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processRegisterAdmin(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processRegisterAdmin(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<ApiResponseMessageOfString>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<ApiResponseMessageOfString>;
        })
      );
  }

  protected processRegisterAdmin(
    response: HttpResponseBase
  ): Observable<ApiResponseMessageOfString> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = ApiResponseMessageOfString.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }

  login(user: RegisterUserDto): Observable<ApiResponseMessageOfUserLoginDto> {
    let url_ = this.baseUrl + '/api/User/Login';
    url_ = url_.replace(/[?&]$/, '');

    const content_ = JSON.stringify(user);

    let options_: any = {
      body: content_,
      observe: 'response',
      responseType: 'blob',
      headers: new HttpHeaders({
        'Content-Type': 'application/json',
        Accept: 'application/json',
      }),
    };

    return this.http
      .request('post', url_, options_)
      .pipe(
        _observableMergeMap((response_: any) => {
          return this.processLogin(response_);
        })
      )
      .pipe(
        _observableCatch((response_: any) => {
          if (response_ instanceof HttpResponseBase) {
            try {
              return this.processLogin(response_ as any);
            } catch (e) {
              return _observableThrow(
                e
              ) as any as Observable<ApiResponseMessageOfUserLoginDto>;
            }
          } else
            return _observableThrow(
              response_
            ) as any as Observable<ApiResponseMessageOfUserLoginDto>;
        })
      );
  }

  protected processLogin(
    response: HttpResponseBase
  ): Observable<ApiResponseMessageOfUserLoginDto> {
    const status = response.status;
    const responseBlob =
      response instanceof HttpResponse
        ? response.body
        : (response as any).error instanceof Blob
        ? (response as any).error
        : undefined;

    let _headers: any = {};
    if (response.headers) {
      for (let key of response.headers.keys()) {
        _headers[key] = response.headers.get(key);
      }
    }
    if (status === 200) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          let result200: any = null;
          let resultData200 =
            _responseText === ''
              ? null
              : JSON.parse(_responseText, this.jsonParseReviver);
          result200 = ApiResponseMessageOfUserLoginDto.fromJS(resultData200);
          return _observableOf(result200);
        })
      );
    } else if (status !== 200 && status !== 204) {
      return blobToText(responseBlob).pipe(
        _observableMergeMap((_responseText: string) => {
          return throwException(
            'An unexpected server error occurred.',
            status,
            _responseText,
            _headers
          );
        })
      );
    }
    return _observableOf(null as any);
  }
}

export class ApiResponseMessageOfIListOfGetAllJobPostsDto
  implements IApiResponseMessageOfIListOfGetAllJobPostsDto
{
  data!: GetAllJobPostsDto[];
  isSuccess!: boolean;
  errorMessage!: string;

  constructor(data?: IApiResponseMessageOfIListOfGetAllJobPostsDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (this as any)[property] = (data as any)[property];
      }
    }
    if (!data) {
      this.data = [];
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data['data'])) {
        this.data = [] as any;
        for (let item of _data['data'])
          this.data!.push(GetAllJobPostsDto.fromJS(item));
      }
      this.isSuccess = _data['isSuccess'];
      this.errorMessage = _data['errorMessage'];
    }
  }

  static fromJS(data: any): ApiResponseMessageOfIListOfGetAllJobPostsDto {
    data = typeof data === 'object' ? data : {};
    let result = new ApiResponseMessageOfIListOfGetAllJobPostsDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.data)) {
      data['data'] = [];
      for (let item of this.data)
        data['data'].push(item ? item.toJSON() : (undefined as any));
    }
    data['isSuccess'] = this.isSuccess;
    data['errorMessage'] = this.errorMessage;
    return data;
  }
}

export interface IApiResponseMessageOfIListOfGetAllJobPostsDto {
  data: GetAllJobPostsDto[];
  isSuccess: boolean;
  errorMessage: string;
}

export class GetAllJobPostsDto implements IGetAllJobPostsDto {
  jobPostingId!: string;
  jobTitleId!: string | undefined;
  jobAdsPic!: string;
  location!: string;
  minRate!: number;
  maxRate!: number;
  jobTitleName!: string | undefined;
  jobDescription!: string;
  essentialDuties!: string;
  education!: string;
  specialized!: string;
  skills!: string;
  experience!: string;
  professionalCert!: string;
  specialSkills!: string;
  training!: string;
  workingConditions!: string;
  bussinessUnit!: string;
  creationTime!: Date;
  introStatement!: string;
  logoInitial!: string | undefined;

  constructor(data?: IGetAllJobPostsDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (this as any)[property] = (data as any)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.jobPostingId = _data['jobPostingId'];
      this.jobTitleId = _data['jobTitleId'];
      this.jobAdsPic = _data['jobAdsPic'];
      this.location = _data['location'];
      this.minRate = _data['minRate'];
      this.maxRate = _data['maxRate'];
      this.jobTitleName = _data['jobTitleName'];
      this.jobDescription = _data['jobDescription'];
      this.essentialDuties = _data['essentialDuties'];
      this.education = _data['education'];
      this.specialized = _data['specialized'];
      this.skills = _data['skills'];
      this.experience = _data['experience'];
      this.professionalCert = _data['professionalCert'];
      this.specialSkills = _data['specialSkills'];
      this.training = _data['training'];
      this.workingConditions = _data['workingConditions'];
      this.bussinessUnit = _data['bussinessUnit'];
      this.creationTime = _data['creationTime']
        ? new Date(_data['creationTime'].toString())
        : (undefined as any);
      this.introStatement = _data['introStatement'];
      this.logoInitial = _data['logoInitial'];
    }
  }

  static fromJS(data: any): GetAllJobPostsDto {
    data = typeof data === 'object' ? data : {};
    let result = new GetAllJobPostsDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['jobPostingId'] = this.jobPostingId;
    data['jobTitleId'] = this.jobTitleId;
    data['jobAdsPic'] = this.jobAdsPic;
    data['location'] = this.location;
    data['minRate'] = this.minRate;
    data['maxRate'] = this.maxRate;
    data['jobTitleName'] = this.jobTitleName;
    data['jobDescription'] = this.jobDescription;
    data['essentialDuties'] = this.essentialDuties;
    data['education'] = this.education;
    data['specialized'] = this.specialized;
    data['skills'] = this.skills;
    data['experience'] = this.experience;
    data['professionalCert'] = this.professionalCert;
    data['specialSkills'] = this.specialSkills;
    data['training'] = this.training;
    data['workingConditions'] = this.workingConditions;
    data['bussinessUnit'] = this.bussinessUnit;
    data['creationTime'] = this.creationTime
      ? this.creationTime.toISOString()
      : (undefined as any);
    data['introStatement'] = this.introStatement;
    data['logoInitial'] = this.logoInitial;
    return data;
  }
}

export interface IGetAllJobPostsDto {
  jobPostingId: string;
  jobTitleId: string | undefined;
  jobAdsPic: string;
  location: string;
  minRate: number;
  maxRate: number;
  jobTitleName: string | undefined;
  jobDescription: string;
  essentialDuties: string;
  education: string;
  specialized: string;
  skills: string;
  experience: string;
  professionalCert: string;
  specialSkills: string;
  training: string;
  workingConditions: string;
  bussinessUnit: string;
  creationTime: Date;
  introStatement: string;
  logoInitial: string | undefined;
}

export class ApiResponseMessageOfString implements IApiResponseMessageOfString {
  data!: string;
  isSuccess!: boolean;
  errorMessage!: string;

  constructor(data?: IApiResponseMessageOfString) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (this as any)[property] = (data as any)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.data = _data['data'];
      this.isSuccess = _data['isSuccess'];
      this.errorMessage = _data['errorMessage'];
    }
  }

  static fromJS(data: any): ApiResponseMessageOfString {
    data = typeof data === 'object' ? data : {};
    let result = new ApiResponseMessageOfString();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['data'] = this.data;
    data['isSuccess'] = this.isSuccess;
    data['errorMessage'] = this.errorMessage;
    return data;
  }
}

export interface IApiResponseMessageOfString {
  data: string;
  isSuccess: boolean;
  errorMessage: string;
}

export class UserDto implements IUserDto {
  firstName!: string | undefined;
  lastname!: string | undefined;
  userName!: string | undefined;
  password!: string | undefined;

  constructor(data?: IUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (this as any)[property] = (data as any)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.firstName = _data['firstName'];
      this.lastname = _data['lastname'];
      this.userName = _data['userName'];
      this.password = _data['password'];
    }
  }

  static fromJS(data: any): UserDto {
    data = typeof data === 'object' ? data : {};
    let result = new UserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['firstName'] = this.firstName;
    data['lastname'] = this.lastname;
    data['userName'] = this.userName;
    data['password'] = this.password;
    return data;
  }
}

export interface IUserDto {
  firstName: string | undefined;
  lastname: string | undefined;
  userName: string | undefined;
  password: string | undefined;
}

export class RegisterUserDto implements IRegisterUserDto {
  userName!: string;
  password!: string;

  constructor(data?: IRegisterUserDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (this as any)[property] = (data as any)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userName = _data['userName'];
      this.password = _data['password'];
    }
  }

  static fromJS(data: any): RegisterUserDto {
    data = typeof data === 'object' ? data : {};
    let result = new RegisterUserDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userName'] = this.userName;
    data['password'] = this.password;
    return data;
  }
}

export interface IRegisterUserDto {
  userName: string;
  password: string;
}

export class ApiResponseMessageOfUserLoginDto
  implements IApiResponseMessageOfUserLoginDto
{
  data!: UserLoginDto;
  isSuccess!: boolean;
  errorMessage!: string;

  constructor(data?: IApiResponseMessageOfUserLoginDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (this as any)[property] = (data as any)[property];
      }
    }
    if (!data) {
      this.data = new UserLoginDto();
    }
  }

  init(_data?: any) {
    if (_data) {
      this.data = _data['data']
        ? UserLoginDto.fromJS(_data['data'])
        : new UserLoginDto();
      this.isSuccess = _data['isSuccess'];
      this.errorMessage = _data['errorMessage'];
    }
  }

  static fromJS(data: any): ApiResponseMessageOfUserLoginDto {
    data = typeof data === 'object' ? data : {};
    let result = new ApiResponseMessageOfUserLoginDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['data'] = this.data ? this.data.toJSON() : (undefined as any);
    data['isSuccess'] = this.isSuccess;
    data['errorMessage'] = this.errorMessage;
    return data;
  }
}

export interface IApiResponseMessageOfUserLoginDto {
  data: UserLoginDto;
  isSuccess: boolean;
  errorMessage: string;
}

export class UserLoginDto implements IUserLoginDto {
  userID!: string;
  userName!: string;
  userToken!: string;
  newRefreshToken!: string;
  userRole!: string[];

  constructor(data?: IUserLoginDto) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (this as any)[property] = (data as any)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.userID = _data['userID'];
      this.userName = _data['userName'];
      this.userToken = _data['userToken'];
      this.newRefreshToken = _data['newRefreshToken'];
      if (Array.isArray(_data['userRole'])) {
        this.userRole = [] as any;
        for (let item of _data['userRole']) this.userRole!.push(item);
      }
    }
  }

  static fromJS(data: any): UserLoginDto {
    data = typeof data === 'object' ? data : {};
    let result = new UserLoginDto();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data['userID'] = this.userID;
    data['userName'] = this.userName;
    data['userToken'] = this.userToken;
    data['newRefreshToken'] = this.newRefreshToken;
    if (Array.isArray(this.userRole)) {
      data['userRole'] = [];
      for (let item of this.userRole) data['userRole'].push(item);
    }
    return data;
  }
}

export interface IUserLoginDto {
  userID: string;
  userName: string;
  userToken: string;
  newRefreshToken: string;
  userRole: string[];
}

export class ApiException extends Error {
  override message: string;
  status: number;
  response: string;
  headers: { [key: string]: any };
  result: any;

  constructor(
    message: string,
    status: number,
    response: string,
    headers: { [key: string]: any },
    result: any
  ) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isApiException = true;

  static isApiException(obj: any): obj is ApiException {
    return obj.isApiException === true;
  }
}

function throwException(
  message: string,
  status: number,
  response: string,
  headers: { [key: string]: any },
  result?: any
): Observable<any> {
  return _observableThrow(
    new ApiException(message, status, response, headers, result)
  );
}

function blobToText(blob: any): Observable<string> {
  return new Observable<string>((observer: any) => {
    if (!blob) {
      observer.next('');
      observer.complete();
    } else {
      let reader = new FileReader();
      reader.onload = (event) => {
        observer.next((event.target as any).result);
        observer.complete();
      };
      reader.readAsText(blob);
    }
  });
}
